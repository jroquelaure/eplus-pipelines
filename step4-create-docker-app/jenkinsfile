node() {
    stage 'Setup Build Environment'
        deleteDir()
        sh "docker images -qa | xargs docker rmi -f || true" 
        git url: 'https://github.com/jroquelaure/docker-lifecycle.git', branch: 'master'
        def server = Artifactory.server('europeMain')
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins-ci',
        usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        
        def username = env.USERNAME
        def password = env.PASSWORD
        def authUrl = "$server.url/api/npm/auth"
        def buildInfo = Artifactory.newBuildInfo() 
        def artDocker= Artifactory.docker server: server
        
    stage 'Resolve'    
        def curlstr="curl -H 'X-JFrog-Art-Api:"+password+"' '$server.url"
        def jarverstr = curlstr+ "/api/search/latestVersion?g=org.jfrog&a=frogsws&repos=gradle-release-local'"
        
        sh jarverstr +' > docker-app/jar/version.txt'
        sh 'cat docker-app/jar/version.txt'
        env.JARVER=readFile('docker-app/jar/version.txt')
        
        sh "mkdir -p docker-app/ui"
        //TODO: Get latest npm frogsui (npm client ?)
        sh """sed -ie 's/ubuntu:5002/$params.dockerRepo/g' docker-app/Dockerfile"""

        def downloadSpec = """{
            "files": [
            {
                "pattern": "gradle-release-local/org/jfrog/frogsws/$env.JARVER/frogsws-$env.JARVER*.jar",
                "target": "docker-app/jar/frogsws.jar",
                "flat":"true"
            },
             {
                "pattern": "npm-release-local/frogsui/-/frogsui-0.3.0.tgz",
                "target": "docker-app/ui/frogsui.tgz",
                "flat":"true"
            }
        ]
        }"""
       
       server.download(downloadSpec, buildInfo)
        
        sh "tar -xvzf docker-app/ui/frogsui.tgz -C docker-app/ui/"
        sh "mv docker-app/ui/package docker-app/ui/frogsui"
            
    stage 'docker build' 
        buildInfo.env.collect()
        sh "docker login -u ${USERNAME} -p ${PASSWORD} " + params.dockerRepo   
        println('starting build '+env.BUILD_NUMBER)   
        sh 'cat docker-app/Dockerfile'
        def tagName="$params.dockerRepoDev/docker-multi-app:$buildInfo.number"
        docker.build(tagName, "-f docker-app/Dockerfile ./docker-app/") 
       
    stage "Push built image"
        artDocker.push(tagName, 'docker-dev-local', buildInfo)
        server.publishBuildInfo(buildInfo)
    
    stage "Xray scan"
            
            def xrayConfig = [
            //Mandatory parameters
            'buildName'         : buildInfo.name,
            'buildNumber'       : buildInfo.number,

            //Optional
            'failBuild'        :false //Default
            ]

            // Scan xray build
            def xrayResults = server.xrayScan xrayConfig
            // Print full report from xray
            echo xrayResults as String

    stage "Test image"    
        //TODO
    
    stage "Promote build"
        def promotionConfig = [
        // Mandatory parameters
        'buildName'          : buildInfo.name,
        'buildNumber'        : buildInfo.number,
        'targetRepo'         : 'docker-prod-local',

        // Optional parameters
        'comment'            : 'ready for prod',
        'sourceRepo'         : 'docker-dev-local',
        'status'             : 'Released',
        'includeDependencies': false,
        'copy'               : true
    ]
    
    // Promote build
    server.promote promotionConfig
    
    sh("""curl -H 'X-JFrog-Art-Api:$params.apiKey' $server.url/api/docker/docker-prod-local/v2/promote -H "Content-Type:application/json" -d '{"targetRepo" : "docker-prod-local", "dockerRepository" : "docker-app", "tag" : "$buildInfo.number", "targetTag" : "latest", "copy": true }' """)
    
}
}